/* libneubot/libneubot.cpp */

/*-
 * Copyright (c) 2013-2014
 *     Nexa Center for Internet & Society, Politecnico di Torino (DAUIN)
 *     and Simone Basso <bassosimone@gmail.com>.
 *
 * This file is part of Neubot <http://www.neubot.org/>.
 *
 * Neubot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Neubot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Neubot.  If not, see <http://www.gnu.org/licenses/>.
 */

//
// Libneubot C wrappers for C++
//
// Ideally this file should be as much autogenerated as possible
//

#include <new>
#include <stdlib.h>

#include <event2/event.h>

#include "ight_wrappers.h"

#include "common/stringvector.h"
#include "common/log.h"

#include "net/connection.h"
#include "net/protocol.h"

#include "neubot/pollable.hh"

//
// Pollable
//

struct IghtPollableWrapper : public IghtPollable {

	ight_slot_vo on_handle_error;
	ight_slot_vo on_handle_read;
	ight_slot_vo on_handle_write;
	void *opaque;

	IghtPollableWrapper(IghtPoller *poller, ight_slot_vo on_read,
	    ight_slot_vo on_write, ight_slot_vo on_error,
	    void *opaque) : IghtPollable(poller) {
		ight_info("IghtPollable::construct");
		this->on_handle_error = on_error;
		this->on_handle_read = on_read;
		this->on_handle_write = on_write;
		this->opaque = opaque;
	};

	virtual void handle_read(void) {
		ight_info("IghtPollable::handle_read");
		this->on_handle_read(this->opaque);
	};

	virtual void handle_write(void) {
		ight_info("IghtPollable::handle_write");
		this->on_handle_write(this->opaque);
	};

	virtual void handle_error(void) {
		ight_info("IghtPollable::handle_error");
		this->on_handle_error(this->opaque);
	};

	virtual ~IghtPollableWrapper(void) {
		ight_info("IghtPollable::~IghtPollable");
	};
};

IghtPollable *
IghtPollable_construct(IghtPoller *poller, ight_slot_vo handle_read,
    ight_slot_vo handle_write, ight_slot_vo handle_error,
    void *opaque)
{
	if (poller == NULL)
		abort();

	try {
		return (new IghtPollableWrapper(poller, handle_read, handle_write,
		    handle_error, opaque));
	} catch (...) {
		return (NULL);
	}
}

int
IghtPollable_attach(IghtPollable *self, long long fileno)
{
	if (self == NULL)
		abort();

	return (self->attach(fileno));
}

void
IghtPollable_detach(IghtPollable *self)
{
	if (self == NULL)
		abort();

	self->detach();
}

long long
IghtPollable_get_fileno(IghtPollable *self)
{
	if (self == NULL)
		abort();

	return (self->get_fileno());
}

int
IghtPollable_set_readable(IghtPollable *self)
{
	if (self == NULL)
		abort();

	return (self->set_readable());
}

int
IghtPollable_unset_readable(IghtPollable *self)
{
	if (self == NULL)
		abort();

	return (self->unset_readable());
}

int
IghtPollable_set_writable(IghtPollable *self)
{
	if (self == NULL)
		abort();

	return (self->set_writable());
}

int
IghtPollable_unset_writable(IghtPollable *self)
{
	if (self == NULL)
		abort();

	return (self->unset_writable());
}

void
IghtPollable_set_timeout(IghtPollable *self, double timeout)
{
	if (self == NULL)
		abort();

	self->set_timeout(timeout);
}

void
IghtPollable_clear_timeout(IghtPollable *self)
{
	if (self == NULL)
		abort();

	self->clear_timeout();
}

void
IghtPollable_close(IghtPollable *self)
{
	if (self == NULL)
		abort();

	delete (self);
}
